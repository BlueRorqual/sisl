#!/usr/bin/env python
"""
Geometry handler for different formats
"""

import sys, os, os.path as osp
import argparse as arg

# Variable for python3 compliance
is_3 = sys.version_info >= (3,0)

import sids

import numpy as np

def run():

    p = arg.ArgumentParser('Manipulates geometries in commonly encounterd files.')

    def dir_type(val,check_type):
        if val in ['x','y','z']:
            if val == 'x': return 0
            if val == 'y': return 1
            if val == 'z': return 2
        try:
            return check_type(val)
        except:
            raise arg.ArgumentTypeError("Type: "+val+" not valid type "+str(check_type.__name__))

    def dir_int(val): return dir_type(val,int)
    def dir_float(val): return dir_type(val,float)

    p.add_argument('-o','--origin',action='store_true',default=False,
                         help='Will push the coordinates to the origin.')
    p.add_argument('-co','--center-of',choices=['mass','xyz','position','cell'],default=None,
                         help='Will move the coordinates to the center of the designated choice.')
    p.add_argument('-r','--repeat',nargs=2,default=None,type=dir_int,action='append',
                         metavar=('dir','repeat'),
                         help='Repeats in the specified direction.')
    p.add_argument('-rx','--repeat-x',type=int,default=1,metavar='repeat',
                         help='Repeats in the x-direction.')
    p.add_argument('-ry','--repeat-y',type=int,default=1,metavar='repeat',
                         help='Repeats in the y-direction.')
    p.add_argument('-rz','--repeat-z',type=int,default=1,metavar='repeat',
                         help='Repeats in the z-direction.')
    p.add_argument('-t','--tile',nargs=2,type=dir_int,action='append',
                         metavar=('dir','tile'),
                         help='Tiles in the specified direction.')
    p.add_argument('-tx','--tile-x',type=int,default=1,metavar='tile',
                         help='Tiles in the x-direction.')
    p.add_argument('-ty','--tile-y',type=int,default=1,metavar='tile',
                         help='Tiles in the y-direction.')
    p.add_argument('-tz','--tile-z',type=int,default=1,metavar='tile',
                         help='Tiles in the z-direction.')
    p.set_defaults(func=geom_convert)

    p.add_argument('in_file',metavar='infile',type=str,
                   help='Read geometry from file.')
    p.add_argument('out_file',metavar='outfile',nargs='+',type=str,
                   help='Write geometry to file, Append for more out files.')

    args = p.parse_args()
    args.func(args)


def geom_convert(args):
    """
    sgeom convert $@
    """
    # Take geometry
    g = sids.get_Sile(args.in_file).read_geom()
    
    if args.origin:
        g.xyz[:,:] -= np.amin(g.xyz,axis=0)[None,:]

    if not args.center_of is None:
        g = g.translate(-g.center(which=args.center_of))
        
    if not args.repeat is None:
        for d,r in args.repeat:
            g = g.repeat(r,d)

    if not args.tile is None:
        for d,t in args.tile:
            g = g.tile(t,d)

    g = g.repeat(args.repeat_x,0).repeat(args.repeat_y,1).repeat(args.repeat_z,2)
    g = g.tile(args.tile_x,0).tile(args.tile_y,1).tile(args.tile_z,2)

    # Store geometry
    for f in args.out_file:
        sids.get_Sile(f,mode='w').write_geom(g)


if __name__ == "__main__":
    run()
