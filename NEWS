0.8.3
=====

- Fixed bug in __write_default (should have been _write_default)

- API change in `close` functions, now ret_coord => ret_xyz,
  ret_dist => ret_rij

- Added `SparseCSR` math operations work on other `SparseCSR` matrices
  Thus one may now do:

      >>> a, b = SparseCSR(...), SparseCSR(...)
      >>> aMb, aPb = a * b, a + b

  Which makes many things much easier.
  If this is used, you are encouraged to assert that the math is correct.
  Currently are the routines largely untested. _Assistance is greatly appreciated
  in creating `nosetests`_.

- Geometries now _always_ create a supercell. This was not the case when
  an atom with no defined orbital radius was used. Now this returns a
  supercell with 10 A of vacuum along each Cartesian direction.


0.8.2
=====

- Fixed reading _hr.dat from Wannier90, now the band-structure of
  SrTiO3 (Junquera's test example) is correct.

- Speeded up tbtrans.py analyzing methods enourmously by introducing
  faster sparse iterators. Now one can easily perform data-analysis on
  systems in excess of 10.000 atoms very fast.

- Added the TBT.AV.nc file which is meant to be created by `sisl` from
  the TBT.nc files (i.e. create the k-averaged output).
  This enables users to run tbtrans, create the k-averaged output, and
  then delete the old file to heavily reduce disk-usage.

  An example:

      tbtrans RUN.fdf > TBT.out
      sdata siesta.TBT.nc --tbt-av
      rm siesta.TBT.nc

  after this `siesta.TBT.AV.nc` exists will all k-averaged quantites.
  If one is not interested in k-resolved quantities this may be very interesting.

- Updated the TBT.nc sile for improved readability.

- Easier script data-extraction from TBT.nc files due to easier conversion
  between atomic indices and pivoting orbitals.

  For this:
  * a2p
    returns the pivoting indices for the given atoms (complete set)
  * o2p
    returns the pivoting indices for the given orbitals

  * Added `atom` keyword for retrieving DOS for a given set of atoms

  * `sdata` and `TBT.nc` files now enable the creation of the TBT.AV.nc file
    which is the k-averaged file of TBT.nc

- Faster bond-current algorithms (faster iterator)

- Initial template for TBT.Proj files for sdata processing

- Geometry:

  * Enabled multiplying geometries with integers to emulate `repeat` or
    `tile` functions:

        >>> geometry * 2 == geometry.tile(2, 0).tile(2, 1).tile(2, 2)
        >>> geometry * [2, 1, 2] == geometry.tile(2, 0).tile(2, 2)
        >>> geometry * [2, 2] == geometry.tile(2, 2)
        >>> geometry * ([2, 1, 2], 'repeat') == geometry.repeat(2, 0).repeat(2, 2)
        >>> geometry * ([2, 1, 2], 'r') == geometry.repeat(2, 0).repeat(2, 2)
        >>> geometry * ([2, 0], 'r') == geometry.repeat(2, 0)
        >>> geometry * ([2, 2], 'r') == geometry.repeat(2, 2)

    This may be considered an advanced feature but useful nonetheless.

  * Enabled "adding" geometries in a similar way as multiplication
    I.e. the following applies:

        >>> A + B == A.add(B)
        >>> A + (B, 1) == A.append(B, 1)
        >>> A + (B, 2) == A.append(B, 2)
        >>> (A, 1) + B == A.prepend(B, 1)

  * Added `origo` and `atom` argument to rotation functions. Previously this could be
    accomblished by:

        rotated = geometry.move(-origo).rotate(...).move(origo)

    while now it is:

        rotated = geometry.rotate(..., origo=origo)

    The origo argument may also be a single integer in which case the rotation
    is around atom `origo`.

    Lastly the `atom` argument enables only rotating a sub-set of atoms.

  * Geometry[..] is now calling axyz if `..` is pure indices, if it is
    a `slice` it does not work with super-cell indices

  * Added `rij` functions to the Geometry for retrieving distances
    between two atoms (`orij` for orbitals)

  * Renamed iter_linear to iter

  * Added argument to iter_species for only looping certain atomic indices

  * Added iter_orbitals which returns an iterator with atomic _and_ associated
    orbitals.
    The orbitals are with respect to the local orbital indices on the given atom

    ```
    >>> for ia, io in Geometry.iter_orbitals():
    >>>     Geometry.atom[ia].R[io]
    ```

    works, while

    ```
    >>> for ia, io in Geometry.iter_orbitals(local=False):
    >>>     Geometry.atom[ia].R[io]
    ```

    does not work because `io` is globally defined.

  * Changed argument name for `coords`, `atom` instead of the
    old `idx`.

  * Renamed function `axyzsc` to `axyz`

- SparseCSR:

  * Added `iter_nnz(i=None)` which loops on sparse elements connecting to
    row `i` (or default to loop on all rows and columns).

  * `ispmatrix` to iterate through a `scipy.sparse.*_matrix` (and the `SparseCSR`
    matrix).

- Hamiltonian:

  * Added `iter_nnz` which is the `Hamiltonian` equivalent of `SparseCSR.iter_nnz`.
    It enables explicit looping on atomic couplings, or orbital couplings.
    I.e. one may specify a subset of atoms or orbitals to loop over.

  * Preliminary implementation of the non-collinear spin-case. Needs testing.

0.8.1
=====

- Fix a bug when reading non-Gamma TSHS files, now the
  supercell information is correct.

- tbtncSileSiesta now distinguishes between:
    electronic_temperature [K]
  and
    kT [eV]
  where the units are not the same.

- Fixed TBT_DN.nc TBT_UP.nc detection as a `Sile`

- Added information printout for the TBT.nc files

       sdata siesta.TBT.nc --info

  will print out what information is contained in the file.

- `Atoms` overhauled with a lot of the utility routines
  inherent to the `Geometry` object.
  It is now much faster to perform operations on this
  object.

- The FDF sile now allows setting and retrieving variables
  from the fdf file. Hence one may now set specific
  fdf flags via:

       sdata RUN.fdf --set SolutionMethod Transiesta

- Changed default output precision for TXT files to .8f.
  Additionally one may use flag `--format` in `sgeom` to
  define the precision.

- `Shape`s have been added. There are now several Shapes
  which may be used to easily find atoms within a given Shape.
  This should in principle allow construction of very complex Shapes
  and easier construction of complex Hamiltonians


0.8.0
=====

This release introduces many API changes and a much more stream-lined
interface for interacting with sisl.

You are heavily encouraged to update your distribution.

Here is a compressed list of changes:

- sdata is now an input AND output dependent command.
  It first reads the input and output files, in a first run, then
  it determines the options for the given set of files.
  Secondly, the sdata command uses "position dependent" options.
  This means that changing the order of options may change the output.
- tbtncSile
  * Correct vector currents (for xsf files)
  * bug-fix for Gamma-only calculations
  * returned DOS is now correctly in 1/eV (older versions returned 1/Ry)
  * fixed sdata atomic[orbital] ranges such that, e.g. `--atom [1-2][3-5]`
    (for atom 1 and 2 and only orbitals 3, 4 and 5 on those atoms.)
  * DOS queries now has an extra argument (E) which returns only for the
    given energy.
  * When storing tables in sdata this now adds information regarding
    each column at the top (instead of at the bottom).
    Furthermore, the information is more descriptive
- Changed all `square` named arguments to `orthogonal`
- Added nsc field to xyz files (to retain number of supercells)
- Added `move` function for geometry (same as translate)
- Added `prepend` function, equivalent to `append`, but adding the
  atoms in the beginning instead of the end
- Fixed many bugs related to the use of Python-ranges (as opposed to numpy ranges)
- SparseCSR now enables operations:
    a = SparseCSR(...)
    a = a * 2 + 2
  is now viable. This enables easy scaling, translation etc. using the
  sparse matrix format (very handy for magnetic fields).
- Enabled `del` for SparseCSR, i.e. `del SparseCSR(..)[0, 1]` will
  remove the element, completely.
- Enabled reading of the TSHS file from SIESTA 4.1, now we may easily interact
  with SIESTA.
- Moved version.py to info.py
- Moved scripts to `entry_points`, this makes scripts intrinsic in the module
  and one may import and use the commands as their command-line equivalents.
- Hamiltonian.construct now takes a single argument which is the function
  for the inner loop.
  The old behaviour may be achieved by doing either:
  >>> func = Hamiltonian.create_construct(dR, param)
  >>> Hamiltonian.construct(func)
  or
  >>> Hamiltonian.construct((dR, param))
- The atoms contained in the Geometry are now not duplicated in case of many
  similar Atom objects. This should reduce overhead and increase throughput.
  However, the efficiency is not optimal yet. 
- Added many more tests, thus further stabilizing sisl

  I would really like help with creating more tests!
  Please help if you can!

