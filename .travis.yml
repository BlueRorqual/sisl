language: python


# Manage sub-modules manually
git:
  submodules: false


branches:
  except:
  - /.*gh-pages.*/

sudo: false

notifications:
  email:
     recipients:
       - nickpapior@gmail.com
     on_failure: always
     on_success: change
  webhooks:
     urls:
       - https://webhooks.gitter.im/e/fa6dc002908da5678b5f
     on_success: change
     on_failure: always
     on_start: never

matrix:
  include:
   - python: 2.7
     env: COVERAGE=true
   - python: 2.7
     env:
       - COVERAGE=true
       - OPTIONAL_DEPENDENCIES=true
   - python: 2.7
     env: PYTHONOPTIMIZE=2
   - python: 3.5
     env: COVERAGE=true
   - python: 3.6
     env:
       - COVERAGE=true
       - OPTIONAL_DEPENDENCIES=true


before_install:
  - |
    if [[ "$TRAVIS_PYTHON_VERSION" == "2.7" ]]; then
        wget http://repo.continuum.io/miniconda/Miniconda-latest-Linux-x86_64.sh -O miniconda.sh
    elif [[ "$TRAVIS_PYTHON_VERSION" == "3.5" ]]; then
        wget http://repo.continuum.io/miniconda/Miniconda3-4.2.12-Linux-x86_64.sh -O miniconda.sh
    else
        wget http://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh
    fi
  - bash miniconda.sh -b -p $HOME/miniconda
  - export PATH=$HOME/miniconda/bin:$PATH
  - hash -r
  - conda config --set always_yes yes --set changeps1 no
# Do actual package installations
  - conda info -a
  - |
    if [[ ${OPTIONAL_DEPENDENCIES:-false} == true ]]; then
       conda create -q -n test-environment python=$TRAVIS_PYTHON_VERSION --file requirements.txt --file .travis_requirements.txt
    else
       conda create -q -n test-environment python=$TRAVIS_PYTHON_VERSION --file requirements.txt
    fi
  - source activate test-environment
  - | # In case we have optional dependencies, also download the sisl-files submodule to test large files
    if [[ ${OPTIONAL_DEPENDENCIES:-false} == true ]]; then
       export SISL_FILES_TESTS=$(pwd)/files/tests
       git submodule update --init files
    fi


install:
  - conda install hdf4 libnetcdf
  - |
    if [[ ${COVERAGE:-false} == true ]]; then
       pip install coverage codacy-coverage
    fi
  - pip install pytest pytest-cov
  - python setup.py install

script:
  - |
    mkdir -p .sisl_coverage
    cd .sisl_coverage
    if [[ ${COVERAGE:-false} == true ]]; then
        echo "Running coverage tests..."
        pytest --cov=sisl --cov-config=../.coveragerc --pyargs sisl
        # Move the coverage information to top-directory
        mv .coverage ..
    else
        echo "Running non-coverage tests..."
        pytest --doctest-modules sisl
        pytest --pyargs sisl
    fi
    cd ..

after_success:
  - |
    if [[ ${COVERAGE:-false} == true ]]; then
       bash <(curl -s https://codecov.io/bash)
       python-codacy-coverage -r coverage.xml
    fi


#
# These are setup scripts:
#

addons:
  apt:
    packages: &common_packages
      - gcc
      - gfortran
#      - libhdf5-serial-dev 
#      - libnetcdf-dev
      # Speedup builds, particularly when USE_CHROOT=1
      - eatmydata


before_script:
  - |
    if [[ $TRAVIS_OS_NAME != 'osx' ]]; then
        export DISPLAY=:99.0
        sh -e /etc/init.d/xvfb start
        sleep 2
    fi
